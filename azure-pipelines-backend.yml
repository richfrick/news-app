trigger:
branches:
include: [main]

resources:
pipelines:
    - pipeline: infraPipeline
      source: news-app-infra
      trigger: true

pool:
vmImage: "ubuntu-latest"

variables:
environment: stg
azureServiceConnection: "AzureServiceConnection"
acrServiceConnection: "ACRServiceConnection" # Docker registry service connection (ACR)
imageRepository: "news-app-stg"
imageTag: "$(Build.BuildId)"
backend_rg: "newsapp-stg-rg"

steps:
    - checkout: self

    - download: infraPipeline
      artifact: tfoutputs
      displayName: "Download infra outputs artifact"

    - script: |
          ACR_LOGIN=$(jq -r .acr_login_server.value $(Pipeline.Workspace)/infraPipeline/tfoutputs/tfoutputs.json)
          WEBAPP_NAME=$(jq -r .webapp_name.value $(Pipeline.Workspace)/infraPipeline/tfoutputs/tfoutputs.json)
          KEYVAULT_NAME=$(jq -r .key_vault_name.value $(Pipeline.Workspace)/infraPipeline/tfoutputs/tfoutputs.json)

          echo "##vso[task.setvariable variable=acrLoginServer]$ACR_LOGIN"
          echo "##vso[task.setvariable variable=webAppName]$WEBAPP_NAME"
          echo "##vso[task.setvariable variable=keyVaultName]$KEYVAULT_NAME"
      displayName: "Parse infra outputs"

    # Build and push image to ACR
    - task: Docker@2
      displayName: "Build and push image to ACR"
      inputs:
      containerRegistry: "$(acrServiceConnection)"
      repository: "$(imageRepository)"
      command: "buildAndPush"
      Dockerfile: "Dockerfile.stg"
      buildContext: "."
      tags: |
          $(imageTag)

    # Set web app container to the new image (using az cli)
    - task: AzureCLI@2
      displayName: "Configure Web App to use new container image"
      inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
          ACR_HOST=$(echo $(acrLoginServer))
          IMAGE="$ACR_HOST/$(imageRepository):$(imageTag)"
          echo "Setting webapp $(webAppName) image to $IMAGE"
          az webapp config container set --name $(webAppName) --resource-group $
          (backend_rg) --docker-custom-image-name $IMAGE --docker-registry-server-url
          "https://$(acrLoginServer)"

    # Fetch DB connection string from Key Vault
    - task: AzureKeyVault@2
      displayName: "Fetch DB connection string from Key Vault"
      inputs:
      azureSubscription: $(azureServiceConnection)
      KeyVaultName: "$(keyVaultName)"
      SecretsFilter: "db-connection-string"
      RunAsPreJob: false

    # Run DB seed script locally in pipeline (alternative: run in container) thenpm run seed-stg runs "NODE_ENV=staging npm run start"
    - script: |
          echo "Seeding DB..."
          export DATABASE_URL=$(DB_CONNECTION_STRING)
          cd scripts || true
          npm run seed-stg
displayName: "Seed the database"
